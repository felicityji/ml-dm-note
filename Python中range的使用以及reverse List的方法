Python中range函数时一个非常常用而且方便的函数，下面结合自己的理解详细说明一下，防止遗忘：
1.常用形式

range(1,5)
结果为[1，2，3，4]，注意：没有5！
解释：可以很多C。C++程序员都以为会是1，2，3，4，5，这个是经常犯的错误。

可以这样记忆：range中的第一个参数是开始，第二个参数是结尾，但用数学中的表达式应该是 [arg1，arg2）



2.第三个参数为step

>>>range(1,5,2)

[1,3]


3. 如何反序遍历一个sequence：
简便方法：如果是一个list：
a = [1,2,3,4,5]
for x in reversed(a):
     print x
 
5,4,3,2,1

通用方法，从尾至头遍历：
for x in range(len(a)-1,-1,-1):
    print a[x]
5,4,3,2,1

解释：len(a)是5，所以range的表达式实际上是range(4,-1,-1)。即[4,-1),步长是-1,也就是说4是开始并包含在里面，然后-1是3，然后是2，然后是1，然后是0，-1师结尾，但不包含。所以输出是a[4],a[3],a[2],a[1],a[0],这样就做到了从尾到头便利list。

4. 说明一下List的顺序标识：
array = [1,2,5,3,6,8,4]
顺序标识为：
（0，1，2，3，4，5，6）
反向顺序标识为：
(-7,-6,-5,-4,-3,-2,-1)

List的slipe（分片）操作就是根据这个顺序来的;
array(0:)#列出包含0之后的
[1，2，5，3，6，8，4]
array(1:)#列出包含1之后的
[2,5,3,6,8,4]
array(:6)#列出不包含6之前的
[1,2,5,3,6,8]
array(:-1)#列出不包含-1之前的
[1，2，5，3，6，8]
 array(3:-3)
[3]
则根据上面的发现，我们可以得到另一种reverse List的方法：
for x in array[::-1]:
    print x

5. Summary
目前我们有三种方法来倒序遍历一个List：
1 . for x in reversed(array):
           print x
2. for x in range(len(array)-1,-1,-1):
           print array[x]
3. for x in array[::-1]:
           print x

--------------------- 
作者：长空飞鸟 
来源：CSDN 
原文：https://blog.csdn.net/iflysoft/article/details/9013315 
